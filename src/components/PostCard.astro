---
import Badge from "./Badge.astro";

// import Badge from "./Badge.astro";

// interface Props {
//   url: string;
//   postInfo: {
//     title: string;
//     pubDate: string;
//     description: string;
//     author: string;
//     image_url?: string;
//     image_alt?: string;
//     video_url?: string;
//     type: string[];
//     tags: string[];
//   };
// }

const { linkUrl, postInfo } = Astro.props;

const {
  author,
  title,
  description,
  pubDate,
  image_url,
  image_alt,
  video_url,
  type,
  tags,
} = postInfo;

console.log(type);

const date = new Date(pubDate);
const formattedDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
---

<article
  class={"flex flex-col bg-blue-950 rounded-lg h-full border-2 border-transparent hover:border-accent-1 hover:shadow-lg hover:scale-[1.01] transition duration-300 group shadow-accent-1 hover:[box-shadow:_0_0_8px_var(--tw-shadow-color)] overflow-hidden relative " + Astro.props.class} style={Astro.props.style}
>
  {linkUrl && <a href={linkUrl} class="absolute inset-0 z-10" />}
  {
    image_url && (
      <header class="">
        <img
          src={image_url}
          alt={image_alt ?? `Imagen de portada de ${title}`}
          class="object-cover"
        />
      </header>
    )
  }
  <section
    class="relative flex flex-col gap-2 p-4 shadow-black [text-shadow:_2px_2px_5px_var(--tw-shadow-color)]"
  >
    {
      image_url && (
        <img
          src={image_url}
          alt={image_alt ?? `Imagen de portada de ${title}`}
          class="mirror absolute inset-0 w-full h-min duration-500 opacity-0  blur group-hover:opacity-50  -z-10 -scale-y-100"
        />
      )
    }
    <header class="flex flex-col gap-1 text-accent-1">
      <h4 class="text-lg text-secondary/70">{author}</h4>
      <h3 class="text-xl">{title}</h3>
    </header>
    <section class="flex flex-col gap-2">
      <div
        class="flex flex-wrap gap-2 [text-shadow:none] text-blue-950 font-bold"
      >
        {
          type &&
            type.map((type) => (
              <a class="z-20 hover:scale-110 hover:brightness-125 transition" href={`/types/${type}`}>
                <Badge class="bg-accent-1">{type}</Badge>
              </a>
            ))
        }
        {
          tags &&
            tags.map((tag) => (
              <a class="z-20 hover:scale-110 hover:brightness-125 transition" href={`/tags/${tag}`}>
                <Badge class="bg-accent-1 ">{tag}</Badge>
              </a>
            ))
        }
      </div>
      <p>{description}</p>
    </section>
    <footer>
      <p>{formattedDate}</p>
    </footer>
  </section>
</article>
<style>
  .mirror {
    mask-image: linear-gradient(to top, black 60%, transparent 90%);
    /* filter: blur(8px); */
  }
</style>
